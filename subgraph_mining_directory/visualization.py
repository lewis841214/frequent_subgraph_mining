## visualization.py
import plotly.graph_objects as go
from typing import List
import networkx as nx

class Visualization:
    @staticmethod
    def plot_subgraphs(subgraphs: List[nx.Graph], colorscale='YlGnBu', node_size=10) -> str:
        """
        Plots the given list of subgraphs using Plotly and returns the HTML components to embed in the Flask application.
        Allows customization of the node color scale and size.

        Args:
            subgraphs (List[nx.Graph]): A list of NetworkX graph objects representing the subgraphs to be visualized.
            colorscale (str): Color scale for nodes.
            node_size (int): Size of the nodes.

        Returns:
            str: The HTML components generated by Plotly to embed in the Flask application.
        """
        if not subgraphs:
            return "<p>No subgraphs to display.</p>"

        figures = []
        for subgraph in subgraphs:
            pos = nx.spring_layout(subgraph)  # positions for all nodes
            edge_x, edge_y = [], []
            for edge in subgraph.edges():
                x0, y0 = pos[edge[0]]
                x1, y1 = pos[edge[1]]
                edge_x.extend([x0, x1, None])  # insert a None to create a segment
                edge_y.extend([y0, y1, None])

            edge_trace = go.Scatter(x=edge_x, y=edge_y, line=dict(width=0.5, color='#888'), hoverinfo='none', mode='lines')

            node_x, node_y = [], []
            for node in pos:
                node_x.append(pos[node][0])
                node_y.append(pos[node][1])

            node_trace = go.Scatter(x=node_x, y=node_y, mode='markers', hoverinfo='text', marker=dict(showscale=True, colorscale=colorscale, size=node_size, color=[], line_width=2))

            node_adjacencies, node_text = [], []
            for node, adjacencies in enumerate(subgraph.adjacency()):
                node_adjacencies.append(len(adjacencies[1]))
                node_text.append(f'{adjacencies[0]} (# of connections: {len(adjacencies[1])})')

            node_trace.marker.color = node_adjacencies
            node_trace.text = node_text

            fig = go.Figure(data=[edge_trace, node_trace], layout=go.Layout(showlegend=False, hovermode='closest', margin=dict(b=0, l=0, r=0, t=0), xaxis=dict(showgrid=False, zeroline=False, showticklabels=False), yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))
            figures.append(fig)

        # Combine all figures into one HTML component
        combined_html = ""
        for fig in figures:
            combined_html += fig.to_html(full_html=False, include_plotlyjs='cdn')

        return combined_html
